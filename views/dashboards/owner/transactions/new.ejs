<% layout('layouts/boilerplate') %>
<!-- <h1>isOwner</h1> -->
<p><%=success%></p>
<div class="row vh-90">
<%- include('../../../partials/sidebar') %>	<!-- relative path -->
	<div class="col-10">
		<div class="card row">
			<div class="col-4 offset-4 card-title text-center h2 bg-primary">
				<%= user.businessName %>
			</div>
			<div class="card-body">
				<form action="/owner/transactions" method="POST">
					<div class="row mb-2">
						<div class="col">
							<input type="text" class="form-control" placeholder="Salon Owner" value="<%=user.firstName%> <%=user.lastName%>" aria-label="salon name" name="salon">
						</div>
						<div class="col">
							<input type="text" class="form-control" placeholder="Salon Client" aria-label="salon client" name="client">
						</div>
						<div class="col">
					    <input type="date" class="form-control" placeholder="Today's Date" aria-label="date" name="date">
					  </div>
					</div>
					<div class="d-flex flex-column align-items-end prod-serv-exp-buttons">
						<a class="btn btn-secondary" onclick="addProdServ()">Add Product/Service Item</a>
						<a class="btn btn-secondary" onclick="addExpense()">Add Expense Item</a>
					</div>
					<!-- List of products/services and/or expenses-->
					<div class="prod-serv-exp-items">
					</div>
					<div class="row textArea">
						<div class="col-12">
							<textarea name="transactionNotes" id="transactionNotes" rows="5" class="form-control my-2"></textarea>
						</div>
					</div>
					<div class="row">
						<div class="d-grid col-6">
							<button class="btn btn-lg btn-success">Submit Transaction</button>
						</div>
						<div class="d-grid col-6">
							<a href="/owner/transactions/new" class="btn btn-lg btn-success">Cancel Transaction</a >
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</div>

 <script>
 	// inner html of expense div to be added at click of "Add Product/Service Item"
	function prodServDiv(inputId) {
		return 				`<div class="col-8">
										<div class="row">
											<div class="col-12">
												<div class="input-group">
													<span class="input-group-text">Product/Service</span>
													<input type="text" name="lineItemContent[]" class="form-control prod-serv-exp-descr" placeholder="Color #23g" aria-label="Product, Service, Expense description">
													<input type="hidden" name="lineItemType[]" value="product/service">
												</div>
											</div>
										</div>
									</div>
									<div class="col-3">
										<div class="input-group mb-1">
										    <span class="input-group-text">$</span>
										  <input type="text" name="lineItemValue[]" class="form-control prod-serv-exp-value" aria-label="Amount (to the nearest dollar)">
										</div>
									</div>
									<div class="col-1">
										<button onclick="deleteItem(${inputId})">D</button>
									</div>`;
	}

	// inner html of expense div to be added at click of "Add Expense Item"
	function expenseDiv(inputId) {
		return 				`<div class="col-8">
										<div class="row">
											<div class="col-12">
												<div class="input-group">
													<span class="input-group-text">Expense</span>
													<input type="text" name="lineItemContent[]" class="form-control prod-serv-exp-descr" placeholder="Color #23g" aria-label="Product, Service, Expense description">
													<input type="hidden" name="lineItemType[]" value="expense">
												</div>
											</div>
										</div>
									</div>
									<div class="col-3">
										<div class="input-group mb-1">
										    <span class="input-group-text">$</span>
										  <input type="text" name="lineItemValue[]" class="form-control prod-serv-exp-value" aria-label="Amount (to the nearest dollar)">
										</div>
									</div>
									<div class="col-1">
										<button onclick="deleteItem(${inputId})">D</button>
									</div>`;
	}
	
	const prodServExpItems = document.querySelector('.prod-serv-exp-items');
	
	let state = {
		inputIds: {},
		total: 0
	}
	let inputLines = 0;


	// Refactor: create 3rd function with passed-in parameters and condense addProdServ & addExpense
	// add Product-Service line item
	function addProdServ(){
		const prodServElement = document.createElement('div');
		prodServElement.className = 'row mb-2';
		prodServElement.innerHTML = prodServDiv(inputLines);

		const prodServElementInput = prodServElement.querySelector('input.prod-serv-exp-value');
		// prodServElementInput.id = `inputId-${inputLines}`;
		prodServElement.id = `inputId-${inputLines}`;
		prodServExpItems.appendChild(prodServElement);

		// console.log(document.querySelectorAll('input.prod-serv-exp-value'));
		updateInputChanges();
	}

	// add Expense line item
	function addExpense(){
		const expElement = document.createElement('div');
		expElement.className = 'row mb-2';
		expElement.innerHTML = expenseDiv(inputLines);
		//console.log(expenseDiv(inputLines));

		const expElementInput = expElement.querySelector('input.prod-serv-exp-value');
		// expElementInput.id = `inputId-${inputLines}`;
		expElement.id = `inputId-${inputLines}`;
		prodServExpItems.appendChild(expElement);

		// console.log(document.querySelectorAll('input.prod-serv-exp-value'));
		updateInputChanges();
	}

	// resets event listeners on the inputs to prevent doubling up event listeners on the same inputs
	function	updateInputChanges(){
		const inputs = document.querySelectorAll('.prod-serv-exp-value');
		inputs.forEach(input => {
			input.removeEventListener('change', updateState);
			input.addEventListener('change', updateState);
		})
		inputLines++;
		// console.log(inputLines);
	}

	function deleteItem(inputNo){
		const idToDelete = document.getElementById(`inputId-${inputNo}`);
		// console.log(idToDelete);
		inputLines --;
		idToDelete.remove();
	}

	// update state with key-value pairs of IDs to current value, and total sum of transaction values
	function updateState(){
		const inputs = document.querySelectorAll('.prod-serv-exp-value');
		// console.log(inputs);
		inputs.forEach(input => {
			state.inputIds[input.id] = parseInt(input.value) | 0;
			state.total = Object.values(state.inputIds).reduce((acc, v) => {
				return acc + v;
			}, 0)
		})
		displayTotal();
	}

	// display the up-to-date (live) total value of transaction for user to view
	function displayTotal(){
		let stateTotalDisplay = document.querySelector('.stateDisplay')
		if(!stateTotalDisplay){
			const textArea = document.querySelector('.textArea');
			stateTotalDisplay = document.createElement('div');
			stateTotalDisplay.className = 'stateDisplay';
			stateTotalDisplay.innerHTML = `Total transaction is: $${state.total}`;
			stateTotalDisplay.style.display = 'block';
			textArea.prepend(stateTotalDisplay);
		} else {
				stateTotalDisplay.innerHTML = `Total transaction is: $${state.total}`;
		}
	}

</script>